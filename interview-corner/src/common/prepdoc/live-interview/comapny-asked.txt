iauro
==========================
how call microservice http and https
----------------------------------------

how implements https in microservice
------------------------------------
https://dzone.com/articles/how-to-achieve-oauth2-security-in-microservices-di
@EnableResourceServer
@Configuration
extends ResourceServerConfigAdaptor
String resourceId
@Override both config method
config(HttpSecurity)

config(ResourceServerSecurityConfigurer)
set resourceId

@Configuration
@EnableWebSecurity
extends WebSecurityConfigureAdaptor
cliend_id, client_secrate
authUrl

@Bean
ResourceServerTokenService //see all param

@Override
AuthenticationManager
setToken BEAN HERE

or
@Configuration
@EnableMethodSecurity
public class SecurityConfig {
    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http
            .authorizeHttpRequests(auth -> auth
                .anyRequest().authenticated()
            )
            .oauth2ResourceServer(oauth2 -> oauth2.jwt());
        return http.build();
    }
}

how to implements auth2
----------------------------------
https://dzone.com/articles/how-to-achieve-oauth2-security-in-microservices-di

CrossOriginSiteinjection explains
---------------------
CORS (Cross-Origin Resource Sharing, applications can only access resources from the same domain they are hosted on)
If a web page from example.com tries to access resources from api.example.com, the browser will check if CORS is enabled and allowed by the server of api.example.comand
CORS is configured on the server-side using HTTP header
CORS is a browser-based feature,
 public void addCorsMappings(CorsRegistry registry) {
                registry.addMapping("/**") // Allow all endpoints
                        .allowedOrigins("https://example.com") // Set your allowed origins

CSRF (Cross-Site Request Forgery)
attacker tricks a user's browser into performing unwanted actions on a website they are logged into
CSRF protects against malicious requests from one domain forcing a user to perform actions on another domain where they're authenticated.  while CSRF is a server-side vulnerability
CSRF protection is typically implemented by using a CSRF token, which is a unique, secret value that is included in requests and validated by the server

String sessionToken = (String) request.getSession().getAttribute("CSRF_TOKEN");
String requestToken = request.getParameter("csrf_token");

if (sessionToken == null || !sessionToken.equals(requestToken)) {
    response.sendError(HttpServletResponse.SC_FORBIDDEN, "CSRF validation failed.");
    return;
}

mvc explains

diff auth1 and auth 2
-----------------------
Feature
OAuth 1.0
OAuth 2.0
Implementation
Complex, requires signatures
Simpler, relies on HTTPS for security
Client Support
Primarily web-based clients
Supports web, desktop, mobile, and non-browser clients
Security
Signature-based on every API call
HTTPS for secure communication
Roles
Consumer, Service Provider, User
Client, Authorization Server, Resource Server, Resource Owner
Access Tokens
Can be long-lived
Often have expiration times with refresh tokens

primary key vs unique key
-------------------------
The primary key does not store null values, whereas the unique key does.
A table can only have one primary key,
whereas it can have multiple unique keys.
 The primary key does not allow you to delete or modify the data. On the other hand, a unique key does
The primary key’s purpose is to enforce entity integrity, whereas the unique key’s purpose is to enforce unique data.

Global logic
--------------------------------------------------
java 8
Difference Between for Loop and foreach Loop
---------------------------------
TUse foreach when:

You just need to read elements.
You want cleaner and more readable code.

Use for when:

You need the index.
You plan to modify the structure or values during iteration.
You need to iterate in a non-standard way (e.g., skipping elements, reverse order).

when use filter on stream and when shouldn,t use
---------------------------------------------------------
There are a few special cases where streams are hard to apply, like loop over 2 or 3 collections simultaneously.
In such case streams make not much sense, for is preferable.
But in general there are no rules when to use or not to use specific construct.

convert stream to string java IO Utils
-------------------------------------------
https://stackoverflow.com/questions/309424/how-do-i-read-convert-an-inputstream-into-a-string-in-java
 String result = IOUtils.toString(inputStream, StandardCharsets.UTF_8);

when and where use microservice and not
----------------------------------------
tranaction better to use monotholic ie in one ms is combinaion of all transaction that is bit more better
senario for catchup the fall back/pull push retry of services (by using log with time)
senario when call parent or child class your choice
when == and equals both same, case of String
countdown and cycle barrier when and where use senario example

how make spring bean thread safe if required
------------------------------------------
http://dolszewski.com/spring/spring-bean-thread-safety-guide/
//using request scope bean if inside any prototype,
other waise prototye can also work if it not within singalton
Prototype’s thread safety depends on the scope of the bean which contains the prototype.

How to make any Spring bean thread-safe?
The best thing you can do to tackle access synchronization is to avoid it.
---------------------------------------------
If it is a web-application , Scope("request") can achieve thread-safety as for each new request
it creates a new object or scope("prototype") will do this.(for each  invocation it creates new bean .)

some design pattern which u used senario
----------------------------------------
https://www.edureka.co/blog/microservices-design-patterns
https://javarevisited.blogspot.com/2021/09/microservices-design-patterns-principles.html#axzz7o66qcj8I
Design Patterns of Microservices

Aggregator
API Gateway
Chained or Chain of Responsibility
Asynchronous Messaging
Database or Shared Data
Event Sourcing
Branch
Command Query Responsibility Segregator
Circuit Breaker
Decomposition


upstream and downstream
---------------------------------

Definition 1: The direction of action
Upstream: receiving requests from / sending responses to

A service upstream is calling me.
Downstream: making requests to / receiving responses from

I am calling a service downstream.
Definition 2: The direction of dependency
Upstream: making requests to / receiving responses from

I am calling a service upstream.
Downstream: receiving requests from / sending responses to

A service downstream is calling me.==


java api for ip address validation crdr, ip rang ip
------------------------------------

-----------------------------------
What is difference between Lambda Expression and Anonymous class?
-------------------
https://www.geeksforgeeks.org/difference-between-anonymous-inner-class-and-lambda-expression/

Anonymous Inner Class	Lambda Expression
It is a class without name.
It is a method without name.(anonymous function)

It can extend abstract and concrete class.
It can’t extend abstract and concrete class.

It can implement an interface that contains any number of abstract methods.
It can implement an interface which contains a single abstract methods.

Inside this we can declare instance variables.
It does not allow declaration of instance variables, whether the variables declared simply act as local variables.

Anonymous inner class can be instantiated.
Lambda Expression can’t be instantiated.

Inside Anonymous inner class, “this” always refers to current anonymous inner class object but not to outer object.
Inside Lambda Expression, “this” always refers to current outer class object that is, enclosing class object.

It is the best choice if we want to handle multiple methods.
It is the best choice if we want to handle interface.

At the time of compilation, a separate .class file will be generated.
At the time of compilation, no separate .class file will be generated. It simply convert it into private method outer class.
Memory allocation is on demand, whenever we are creating an object.	It resides in a permanent memo

If we make multiple identical requests and receive the same response every time, the APIs are generally called idempotent.
PUT is an idempotent method because it updates a record. If PUT/payment endpoint is called with an identical request,
it will result in no state change other than the first request.

Spring applies the class-level annotation to all public methods of this class that we did not annotate with @Transactional.
However, if we put the annotation on a private or protected method, Spring will ignore it without an error.

GP morgan
---------------------
what diffrent functionlity should be on UI for lot of data access from db
filter/search/pagination/download if huge data

@Transaction what is defalut propagation and isoloation should be handle it by coder

Transactional Levels:
DEFAULT: Uses the database's default isolation level, often READ_COMMITTED.
READ_UNCOMMITTED: Allows dirty reads (reading uncommitted changes).
READ_COMMITTED: Prevents dirty reads but might allow non-repeatable reads.
REPEATABLE_READ: Prevents non-repeatable reads but might allow phantom(occurs when a transaction retrieves a set of rows twice and new rows are inserted into or removed from that set by another transaction that is committed in between) reads.
SERIALIZABLE: Highest isolation level, preventing all concurrency anomalies, often at the cost of performance.
Propagation:
REQUIRED (default): If a transaction is already active, the method participates in it. If not, a new transaction is started.
REQUIRES_NEW: Always creates a new transaction, suspending any existing one. The existing transaction is not affected by the new one.
SUPPORTS: Supports the current transaction if one exists. If no transaction exists, the method executes non-transactionally.
MANDATORY: Requires a current transaction. If none exists, throws an exception.
NEVER: Throws an exception if a transaction is active. The method executes non-transactionally.
NOT_SUPPORTED: Executes non-transactionally, suspending any existing transaction.
NESTED: Executes within a nested transaction, allowing rollback of the nested transaction while preserving the outer one.

select *from Emply,Dept what output//select both table as combined
can we join more than one table //many can join together

how to initialize db in spring boot
You can create a data.sql file in your src/main/resources folder and it will be automatically executed on startup. In this file you can add some insert statements,

without @Retry how to hadle the retry functionlity
useing while(true) keep counter in catch block if count==max break the loop

how to select from n1 row to n2 row no of record from db the

SELECT * FROM table limit 100` -- get 1st 100 records
SELECT * FROM table limit 100, 200` -- get 200 records beginning with row 101


how to configure db in spring/where keep user name and password
<!-- JPA Data (We are going to use Repositories, Entities, Hibernate, etc...) -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>

        <!-- Use MySQL Connector-J -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
        </dependency>
    </dependencies>

properties file //but user an dpassword whold be in encypted formate
spring.datasource.url=jdbc:mysql://localhost:3306/restapi
spring.datasource.username=root
spring.datasource.password=
or
spring:
  datasource:
    url: jdbc:mysql://localhost:3306/yourdb
    username: youruser
    password: yourpassword
    driver-class-name: com.mysql.cj.jdbc.Driver

how to initialize jpa/dab configuration
put any .sql file in class path spring automatically initialize

shoud be any global varible in spring bean if yes how to manage singalton
it update in synchronized blok for thread safty
5. Consider Prototype Scope for Stateful Beans
4. Utilize ThreadLocal for Per-Thread State
3. Synchronize Access to Shared Resources
2. Use Thread-Safe Data Structures
AtomicInteger count = new AtomicInteger(0);

how to handle @retry for particular exception
int count = 0;
int maxTries = 3;
while(true) {
    try {
        // Some Code
        // break out of loop, or return, on success
    } catch (SomeException e) {
        // handle exception
        if (++count == maxTries) throw e;
    }
}

public static void doWithRetry(int maxAttempts, Operation operation) {
        for (int count = 0; count < maxAttempts; count++) {
            try {
                operation.doIt();
                count = maxAttempts; //don't retry
            } catch (Exception e) {
                operation.handleException(e);
            }
        }
    }
	https://dzone.com/articles/spring-retry-way-to-handle-failures#:~:text=You%20can%20configure%20on%20what,SQLException%2C%20in%20this%20case).

	@Retryable(value = { SQLException.class }, maxAttempts = 3)

	BackOff policy to create a gap between retries.
	 @Retryable(value = { SQLException.class }, maxAttempts = 3, backoff = @Backoff(delay = 5000))

	 Spring Cloud Circuit Breaker
	 ===================================
	 Auto Configuration
	 <artifactId>spring-cloud-starter-circuitbreaker-resilience4j<

	 @RefreshScope
	 @RestController
	 automatically take up the new value from spring config server

	 @Order
	 87

SELECT  * FROM table_name ORDER BY colm_name DESC LIMIT n - 1, 1;
or
SELECT  * FROM table_name ORDER BY colm_name DESC LIMIT 1 offset n-1;
This query will return the first row after the n-1 rows that should be the nth highest record.


SELECT *
FROM (
    SELECT *, ROWNUM AS rn
    FROM your_table
    ORDER BY your_column
)
WHERE rn = N;

delete duplicate record
SELECT
    email, COUNT(email)
FROM
    contacts
GROUP BY
    email
HAVING
COUNT (email) > 1;

DELETE c1 FROM contacts c1
INNERJOIN contacts c2
WHERE
    c1.id > c2.id AND
    c1.email = c2.email;

join in better pictorial representation
http://www.differencebetween.net/technology/software-technology/difference-between-join-and-inner-join/

An SQL INNER JOIN is same as JOIN clause, combining rows from two or more tables

Rate limiter
--------------
<artifactId>spring-cloud-starter-netflix-zuul</artifactId>
 <artifactId>spring-cloud-zuul-ratelimit</artifactId>
 Secondly, let's add the following Zuul properties in our application.yml file:

 zuul:
  routes:
    serviceSimple:
      path: /greeting/simple
      url: forward:/
    serviceAdvanced:
      path: /greeting/advanced
      url: forward:/
  ratelimit:
    enabled: true
    repository: JPA
    policy-list:
      serviceSimple:
        - limit: 5
          refresh-interval: 60
          type:
            - origin
      serviceAdvanced:
        - limit: 1
          refresh-interval: 2
          type:
            - origin
  strip-prefix: true

@Order
It is used for Advice execution precedence.
The highest precedence advice runs first. The lower the number, the higher the precedence

which tppe of object call JPA methods //JpaRepository type

Why JPA and why not Hibernate use
JAP is specification we implement it since if we use Hibernate and leter we need to change from Hibernate to another techonoloy drived from JAP
it will be diffcult.

flow chart tutorial/
===========================

https://creately.com/guides/flowchart-guide-flowchart-tutorial/

Deutsche Bank
-------------------------
write producer consumer problmes

write discovery server ms
----------------------------
create spring boot with
@SpringBootApplication
@EnableEurekaServer
pplication.properties file is given below

application.properties
----------------------------
eureka.client.registerWithEureka = false
eureka.client.fetchRegistry = false
server.port = 8761

register survice with eureka server
------------------------------------
create spring booth with
@SpringBootApplication
@EnableEurekaClient

application.properties
-------------------------
eureka.client.serviceUrl.defaultZone  = http://localhost:8761/eureka
eureka.client.instance.preferIpAddress = true
spring.application.name = eurekaclient


design coposite key in hibernate
-----------------------------------------------------
public class AccountId implements Serializable {
    private String accountNumber;

    private String accountType;
	}
	@Entity
@IdClass(AccountId.class)
public class Account {
    @Id
    private String accountNumber;

    @Id
    private String accountType;

    // other fields, getters and setters
}
or
@Embeddable
public class BookId implements Serializable {
    private String title;
    private String language;

	}
	@Entity
public class Book {
    @EmbeddedId
    private BookId bookId;
	}

what is dimond problmes
https://www.ccbp.in/blog/articles/diamond-problem-in-java

list of varnarbility and how to resolve them
find list of employe under seniour manager in tree structure

WITH RECURSIVE employee_hierarchy AS (
    -- Anchor: Start from the senior manager
    SELECT
        employee_id,
        name,
        manager_id,
        1 AS level
    FROM employees
    WHERE employee_id = 1 -- <-- Replace with the senior manager's ID

    UNION ALL

    -- Recursive part: Find direct reports
    SELECT
        e.employee_id,
        e.name,
        e.manager_id,
        eh.level + 1
    FROM employees e
    INNER JOIN employee_hierarchy eh ON e.manager_id = eh.employee_id
)

SELECT * FROM employee_hierarchy
ORDER BY level, employee_id;

<<<<<<<< HEAD:interview-corner/src/common/prepdoc/live-interview/comapny-asked.txt
Wipro
========
Bipro
>>>>>>>> f2b88fb49b9f1ff54ef692b87a95a098382f4542:interview-corner/src/common/prepdoc/interview/comapny-asked.txt
-------------
MetaSpace
-----
In Java 8, PermGen method area replaced with MetaSpace. They have moved permGem to the separate memory in the native OS and that is called MetaSpace.
It can by default auto increases its size. In MetaSpace, classes can load and unload during the lifespan of the JVM.

sso
------------
Building SSO (Single Sign-On) in Java typically involves combining the OAuth 2.0 protocol with OpenID Connect (OIDC) and using a central identity provider (IdP) like Keycloak, Okta, Auth0, or Azure AD
https://www.onelogin.com/learn/how-single-sign-on-works


altimetrik
===============================================================
explain architecture of current project
                [ Frontend (React/Angular/Mobile) ]
                               |
                          [API Gateway](Rate limiting, routing, authentication)/AWS API Gateway
                               |
  ┌────────────┬─────────────┬─────────────┬─────────────┐
  │  User MS   │  Product MS │  Cart MS    │  Order MS   │ ... (other MS)
  └────▲───────┴──────▲──────┴────▲────────┴──────▲──────┘
       │              │            │               │
   [DB - Users]   [DB - Products] [Redis + DB]  [Kafka + DB]
       │              │            │               │
       └──────►  Shared Services (Auth, Notification, Payment, Inventory)
                               |
                           [Kafka / RabbitMQ]
                               |
                        [Event Consumers / Workers]
                               |
                     [Analytics / Audit / Fraud Detection]


12 factor in ms
microservices orchestration and choreography
implemented cache?
https://medium.com/@germainnsibula/implementing-an-lru-cache-in-java-a-comprehensive-guide-94e8884ff17b#:~:text=To%20implement%20an%20LRU%20cache%2C%20we%20can%20use%20a%20combination,table%20and%20a%20linked%20list.

LRUCache<K, V> extends LinkedHashMap
public LRUCache(int capacity) {
        // accessOrder = true makes LinkedHashMap behave like an LRU cache
        super(capacity, 0.75f, true);
        this.capacity = capacity;
    }
@Override
    protected boolean removeEldestEntry(Map.Entry<K, V> eldest) {
        return size() > capacity;
    }

circuit breaker pattern,
--------------------------------
https://medium.com/geekculture/design-patterns-for-microservices-circuit-breaker-pattern-276249ffab33#id_token=eyJhbGciOiJSUzI1NiIsImtpZCI6IjIzZjdhMzU4Mzc5NmY5NzEyOWU1NDE4ZjliMjEzNmZjYzBhOTY0NjIiLCJ0eXAiOiJKV1QifQ.eyJpc3MiOiJodHRwczovL2FjY291bnRzLmdvb2dsZS5jb20iLCJhenAiOiIyMTYyOTYwMzU4MzQtazFrNnFlMDYwczJ0cDJhMmphbTRsamRjbXMwMHN0dGcuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20iLCJhdWQiOiIyMTYyOTYwMzU4MzQtazFrNnFlMDYwczJ0cDJhMmphbTRsamRjbXMwMHN0dGcuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20iLCJzdWIiOiIxMTY5MDk0NzQ3OTU5MDgwODk3NDciLCJlbWFpbCI6ImFrczAwN3ZpdEBnbWFpbC5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmJmIjoxNzQ1NDY0OTA3LCJuYW1lIjoiYWJoaW1hbnl1IGt1bWFyIiwicGljdHVyZSI6Imh0dHBzOi8vbGgzLmdvb2dsZXVzZXJjb250ZW50LmNvbS9hL0FDZzhvY0x1aGNweGloOGYwLXdESFpDTTBIakI5WF9Pc1FMN0c5MDBEVTIzZ0d0cHktQU1ZZz1zOTYtYyIsImdpdmVuX25hbWUiOiJhYmhpbWFueXUiLCJmYW1pbHlfbmFtZSI6Imt1bWFyIiwiaWF0IjoxNzQ1NDY1MjA3LCJleHAiOjE3NDU0Njg4MDcsImp0aSI6IjIyYWQ2MmRmOWJhZDgzOWYyNjI2YzVjOGMzNjQzOWQyMzUxOTc0ZmUifQ.Q8qUlgWlL7xL86bucbZKRYjZdINsoaqJQHY_QmN2iA_83oOk4jAKtCWubEEN_PMLcExQtQBXQ7hI3W5wG_9UGGwFO7nQZutAnwbGidafBA2pu3HOdGflStKj6ozKsx-i-Z_OkzoxU4IzHAETeiKCym50TlMVp4_AREVHWCl8ziUa2m7qqr-6IuTtMVKb6bs9nQjKyHzu5d0pF2Y7FZRFEkrr3Gsa2mNhDpDdzspNslVjMipiEPX7pk6k9egytMgX84jyCDaysJOYDyMmSHTEYSNF-WtnDRIEcILbMjiUiDmPcWTZpBEll9tG2aERm9Dn5QBC38l_dIbmUh9wS-Y_wQ

https://nirajtechi.medium.com/circuit-breaker-in-microservices-and-spring-boot-example-4ad76c7a33e6

API gatway ms desgn patterns
---------------------------------
https://medium.com/design-microservices-architecture-with-patterns/api-gateway-pattern-8ed0ddfce9df

https://medium.com/capital-one-tech/10-microservices-design-patterns-for-better-architecture-befa810ca44e
Service discovery and api gatway

profiling how to do and handle
find index of vowel char in str
how to handle distributed transactions

spring to spring boot migration


how to migrate spring to microservices/spring boot
------------------------------------
speirng to spring boot
https://www.baeldung.com/spring-boot-migration

spring boot to microservice
how to use multiple db in project

why we use other db when already JPS/Hibernate is there
how to call store procedure
-------------------------------
https://docs.snowflake.com/en/developer-guide/stored-procedure/stored-procedures-calling
CREATE PROCEDURE GetEmployeeById(IN emp_id INT)
BEGIN
    SELECT * FROM employees WHERE id = emp_id;
END
try (Connection conn = DriverManager.getConnection(jdbcUrl, username, password)) {
            // Prepare the call
            CallableStatement stmt = conn.prepareCall("{ call GetEmployeeById(?) }");

            // Set the input parameter
            stmt.setInt(1, 101);

            // Execute the procedure
            ResultSet rs = stmt.executeQuery();


when we use functional interface
-----------------------------------
when you want to represent a single abstract method and enable the use of lambda expressions and method references

how to increase performance of db
-----------------------------------------
focus on query optimization, indexing, hardware optimization, and database tuning
 including database design, configuration, query optimization, indexing, and hardware considerations. The goal is to ensure data retrieval is faster


how to create composite key in jpa
@Embeddable + @EmbeddedId

which of design pattern use in microservices
✅ 1. Decomposition Patterns
✅ 2. Database Patterns
✅ 3. Communication Patterns
✅ 4. Resiliency Patterns
✅ 5. Observability Patterns
✅ 6. Security Patterns
✅ 7. Transaction and Consistency Patterns
✅ 8. Deployment Patterns
✅ 9. API Patterns

docker and cubernetee
------------------------------
Docker and Kubernetes are open-source technologies used for containerization and orchestration of applications. Docker is a container runtime that allows developers to package applications and their dependencies into containers,
 making them portable and easy to deploy. Kubernetes is a container orchestration system that automates the deployment, scaling, and management of these containers across a cluster of servers


have you wored on AWS
---------------------
https://www.geeksforgeeks.org/aws-interview-questions/


how to do authentication and authorization
------------------------------------------
https://dev.to/behalf/authentication-authorization-in-microservices-architecture-part-i-2cn0
https://medium.com/hexaworks-papers/managing-user-authentication-and-authorization-in-microservices-architectures-fae705f40627

proxy design pattern
how to configure service discovery api gatway in ms

what is service discovery and api gatway
----------------------
an API gateway serves as the single entry point for all client requests, acting as a front-end for the microservices. Service discovery, 
on the other hand, is a mechanism that allows microservices to find and communicate with each other within the application

API Gateway:
Single Entry Point:
The API gateway acts as the sole interface for client requests, handling all external interactions with the microservices.
Request Routing and Transformation:
It determines which microservice should handle a particular request and forwards it accordingly, potentially transforming the request along the way.
Cross-cutting Concerns:
The gateway handles tasks like authentication, authorization, rate limiting, and security, simplifying the development and maintenance of microservices.
Load Balancing:
It can distribute traffic across multiple instances of a microservice to ensure high availability and performance.

Service Discovery:
Dynamic Location:
Service discovery helps microservices locate and communicate with each other dynamically, even if services are added or removed from the network.
Service Registry:
Microservices register their presence and location (e.g., IP address and port) with a service registry.
Lookup and Communication:
When a microservice needs to communicate with another, it queries the service registry to find its location and then connects directly.
Scalability and Flexibility:
Service discovery allows for easier scaling of microservices and makes the architecture more flexible and resilient.

GC how it work and java memory model

how to configure multiple db or db types in ms
-------------------------------
https://dev.to/javafullstackdev/a-comprehensive-guide-to-multiple-database-configuration-for-microservices-in-spring-boot-1la4
how to decrease startup time of spring boot
spring:
  main:
    lazy-initialization: true
	OR
	SpringApplication app = new SpringApplication(MyApplication.class);
app.setLazyInitialization(true);

@SpringBootApplication(exclude = {DataSourceAutoConfiguration.class})
Use Spring profiles (@Profile) to load only environment-specific beans:
@Profile("dev")
@Bean
public DevOnlyService devOnlyService() {
    return new DevOnlyService();
}

Actuator gives detailed startup metrics.
management.endpoint.startup.enabled=true
management.endpoints.web.exposure.include=startup

Reduce logging on startup:
logging.level.root=WARN
logging.level.org.springframework=ERROR
<<<<<<<< HEAD:interview-corner/src/common/prepdoc/live-interview/comapny-asked.txt
find no of unique substring
find sum of age having same name in Student(name, age)
segrate odd and even no in list using predicate
write query to find all employee who dont have manager(is on bench)
select *from employee where mgrid=null;
=====================================================================================================
========

============================================
>>>>>>>> f2b88fb49b9f1ff54ef692b87a95a098382f4542:interview-corner/src/common/prepdoc/interview/comapny-asked.txt
paypal
-----------------------------
what r benifit we getting by stream programming
1. Concise and Readable Code:
2. Functional Programming Paradigm:
3. Lazy Evaluation:
4. Parallel Processing:
5. Abstraction:
6. Reduced Error Potential:
7. Pipeline of Functions:
8. Stateless Operations:
9. Versatile Data Sources:
what happen internallly in spring boot from http request to http response
🧭 1. HTTP Request Reaches the Server
The embedded Tomcat (or Jetty/Undertow) server listens on a configured port.
It accepts the incoming HTTP request.

📦 2. Request is Passed to Spring's DispatcherServlet
Tomcat hands the request to Spring's DispatcherServlet (a central front controller).
auto-configured in Spring Boot.

🧭 3. DispatcherServlet Delegates to HandlerMapping
The DispatcherServlet consults HandlerMapping beans to find a matching controller method based on the request path and HTTP method.
Examples: RequestMappingHandlerMapping, SimpleUrlHandlerMapping.

👨‍💻 4. Controller Method is Invoked
Once the correct handler (controller method) is found, it's invoked using a HandlerAdapter.
📦 5. Business Logic is Executed
Your controller executes its business logic or delegates to a service layer.
🔁 6. Return Value is Handled by ViewResolvers / MessageConverters
If the return type is:
@ResponseBody or REST controller: a HttpMessageConverter serializes the object (e.g., to JSON using Jackson).
📤 7. Response is Sent Back to Client
The response is returned to the DispatcherServlet, which sends it to the embedded server.
🔒 (Optional) Interceptors, Filters, and AOP
These components may wrap around the request/response lifecycle:

Filters: Servlet-level, e.g., authentication, CORS.
Interceptors: Spring MVC-level, e.g., logging, pre/post processing.
AOP: Aspect-oriented programming for cross-cutting concerns like transactions.

sql languages DDL/DML, diff in delete and truncate
There are five main categories for the SQL commands:

DDL – Data Definition Language – defines and alters the database schema;
DQL – Data Query Language – performs the query operations on the data within schema objects;
DML – Data Manipulation Language – manipulate the data present in the database;
DCL – Data Control Language – manages the database system’s rights, permissions, and other controls.
TCL – Transaction Control Language – deals with the transaction within the database.

----------------
DDL
----
CREATE	Creates a new table, view, or other object
ALTER	Modifies an existing database object
DROP	Deletes objects like tables or databases
TRUNCATE	Removes all rows from a table (faster than DELETE)
RENAME Changes the name of a database object

DML
-----
SELECT	Retrieves data from tables
INSERT	Adds new data to a table
UPDATE	Modifies existing data in a table
DELETE	Removes data from a table

primarykey and unique key difference
Primary Key vs Unique Key: Key Differences

Feature	Primary Key	Unique Key
Purpose	Uniquely identifies each record in a table	Ensures column(s) values are unique
Null values	❌ Not allowed (cannot be null)	✅ Allowed (but only one null per column in some DBs)
Number per table	Only one primary key allowed per table	Can have multiple unique keys
Index created	Automatically creates a clustered index (in some DBs)	Creates a non-clustered index (by default)
Combination of columns	Yes (composite key possible)	Yes (also allows composite unique keys)
Default behavior	Automatically NOT NULL + UNIQUE	Only UNIQUE (nullable unless specified

Transaction management spring boot-12-factor
=================================================
https://www.marcobehler.com/guides/spring-transaction-management-transactional-in-depth

L9.
How can you catch an exception thrown by another thread in Java?
This can be done using Thread.UncaughtExceptionHandler.

12 factor app in microservices
https://www.baeldung.com/spring-boot-12-factor

DDOS attack
https://www.onelogin.com/learn/ddos-attack
occurs when a group of systems flood a server with fraudulent traffic. Eventually, the server is overwhelmed, causing it to either go down, or become unresponsive, even to legitimate requests.
solution:
2. Rate Limiting & Throttling
 4. Auto Scaling Infrastructure
 Use DDoS Protection Services
 7. CAPTCHA / Challenge Mechanism
  IP Blacklisting / Whitelisting
  

multi-factor authentication

sernario based question in microservices
1.what is response type object in microservices -ResponseEntity
2.Explain Auth2.architecture in full details
https://github.com/hendisantika/spring-boot-security-oauth2-example

3.how to Authorized role based in microservices

4.How to Authenticate user for particular action
5.L-stack, EFK logging, Splunk, grafana
6.how to stop user to no of times access API//t Rate Limiting based on the user identity (like user ID or IP address).
7.auth token and access token
8.How to recognise this access api is fake acess, Docc attack //Validate all tokens (signature, expiration, issuer)
9.Dev ops entire flow
10.Docker koobernet, CI/CD
11.HOw to acess properties in spring boot/ how to update live properties in production
12. mfa authenticaiton
https://www.javadevjournal.com/spring-security/two-factor-authentication-with-spring-security/


@Bean and @Autowire difference
for method level @Bean is for instantiation of bean in config that get added in spring context
@Bean annotation in a @Configuration-annotated or in a @Component-annotated class.

and @Autowied on method is seeter injection ie injection haapening after setting some properties

On class level

@Autowired annotation is optional for constructor based injection
@Component is a class-level annotation, but @Bean is at the method level, so
@Component is only an option when a class's source code is editable. @Bean can always be used, but it's more verbose.


What is the difference between @bean and @component?
@Component is a class-level annotation, but @Bean is at the method level, so @Component is only an option when a class's source code is editable.
@Bean can always be used, but it's more verbose.
@Component is compatible with Spring's auto-detection, but @Bean requires manual class instantiation.

Snacks and Lattder design
https://workat.tech/machine-coding/editorial/how-to-design-snake-and-ladder-machine-coding-ehskk9c40x2w

find min sum in maxtrix pick an element from each row

@Aspect oriented programming
https://docs.spring.io/spring-framework/docs/2.5.5/reference/aop.html

session based authenticaiton and Authbase difference and how to implements


read write lock colum table or row
horizontal /vertical scaling the appling how

Questions for L1 (Theory round)

OOPs, Immutability, Overridden and Overloading concepts
Ability to explain project scenarios covering all the exception/edge cases
Internal implementation of HashMap and different collections worked on
Design patterns - Singleton, Builder & Chain of responsibility.
Difference between NoClassDefFound errors and ClassNotFoundExceptions 
//ClassNotFoundExceptions/At runtime, during class loading via reflection (e.g., Class.forName())	/exception, need to handle
//NoClassDefFound/At runtime when class was present at compile time but missing at run time //error need to Ensure class is available at runtime (JAR in classpath)
Java multi-threading project experience details.

Questions for L2 (Coding round)

Wrote code for Builder design pattern or singleton design pattern in Java (private constructor, static get instance method, suppressing ability to clone)
Algorithms
simple "anagram" Java program
program to check whether a string {[()]} is balanced or not using Java stack; Find if the string containing multiple types of parentheses is balanced ex - {()}[]
Java program to check if any number given as input is the sum of two prime numbers
List of integers is called perfect if it has a minimum of 3 numbers in it and the difference between any 2 adjacent numbers is the same. Given a list of integers, return number of perfect sub lists
Debugging experience with JVM crash logs (thread dumps and heap dump log files)

where we store db password in microservices- in encrypted in web.xml and decripted in security file
how confiure deployment descriptor in spring boot-web.xml example that maps all URL paths (/*)
DispatcherServlet
DispatcherServlet handles an incoming HttpRequest, delegates the request, and processes that request a
ccording to the configured HandlerAdapter interfaces that have been implemented within the Spring application
along with accompanying annotations specifying handlers, controller endpoints, and response objects.


sql/no sql which db use how to decide
how to ALC/NLC how to configure
how to get routed newly dynamic ip instance on cloud

when to know horizontal scalling require how to instruct cloud to create new instance and how to tell delete one instance
<<<<<<<< HEAD:interview-corner/src/common/prepdoc/live-interview/comapny-asked.txt


wipro
=============================================================
select emply having max salray in each department where emp count in depart>1000
SELECT e.emp_id, e.emp_name, e.salary, e.department_id
FROM employees e
JOIN (
    SELECT department_id, MAX(salary) AS max_salary
    FROM employees
    GROUP BY department_id
    HAVING COUNT(*) > 1000
) dept_max ON e.department_id = dept_max.department_id
           AND e.salary = dept_max.max_salary;

@RateLimite, @CircuitBreaker, @Advise, @PointCut, all Type of Advise
Purpose of git cherry-pick
------
Apply a specific fix or feature to another branch without merging everything.
Avoid merging unrelated or experimental work when only certain changes are needed.

best practices to write RestAPI
----------------------------
✅ 1. Use Proper HTTP Methods & Naming
✅ Example: GET /users, GET /products, GET /articles
✅ 2. Support Pagination
✅ 3. Allow Filtering
✅ 4. Allow Sorting
✅ 5. Use Consistent Response Format
✅ 6. Use Status Codes Properly
✅ 7. Support Sparse Fieldsets (optional but nice)
✅ 8. Cache Headers (optional for optimization)
✅ 9. Rate Limit Responses (optional)

TESCO
=========================================================================================
how secure communication we do between ms/Auth2 and others, JWT token
-------------------------
Secure communication between two microservices typically involves the use of:
Mutual TLS (mTLS) for transport-level encryption and authentication
JWT or OAuth2 tokens for identity and authorization
HTTPS as the communication protocol
Spring Boot + Spring Security in Java for implementation

how to open our service for fixed no of services/ip whitelisting/whitelisting upstream ms
------------------
Option 1: Mutual TLS (mTLS)
Cryptographically secure
Doesn’t need tokens or extra requests
Enforces access based on client identity (CN, OU, etc.)

 Implementation Steps:
✅ Generate a unique certificate for each service
✅ Your server validates client certificates
✅ Restrict access only to specific certificate identities

Option 2: JWT Tokens with Service Whitelisting
 Benefits:
Easier to rotate/renew credentials
No SSL cert generation required
Easier in containerized/cloud-native environments

how diffrent wasy to handle transaction in ms/2PC and Saga(for less time)
----
✅ 1. Local Transactions
Use local database transactions within a single microservice.
✅ 2. Distributed Transactions (2PC - Two Phase Commit)
Coordinates a transaction across multiple services/databases.
✅ 3. Saga Pattern (Most Common)
Manages long-running, distributed transactions via a series of local transactions and compensating actions.
🔹 Types of Saga:
Choreography-based Saga:
Services emit events and listen for events from others.
✅ 4. Eventual Consistency with Event Sourcing
Uses event sourcing and eventual consistency instead of immediate consistency.
✅ 5. Transactional Outbox Pattern
Writes domain event to a local “outbox” table in the same DB transaction.
A background process publishes these events to a message broker (Kafka, RabbitMQ).

✅ 6. Change Data Capture (CDC)
Monitors DB changes and publishes events (e.g., using Debezium).
✅ 7. Compensation and Retry Mechanisms
If a step fails, previous successful steps are compensated (undone).

✅ 8. Idempotency Handling
Ensures that retrying an operation doesn’t produce duplicate results.
Important for APIs and event processing in distributed systems.

how pallel stream api work internall /join and fork using no of core cup threads
what is JWT token and when and where it get used and how to use implementation
what is Dead Latter Query
----------------
Dead Letter Queue (DLQ)
As described earlier, a DLQ is a messaging concept (used in systems like SQS, RabbitMQ, Kafka, etc.) for handling messages that can't be successfully processed.
If you're working in microservices or event-driven systems, “Dead Letter Query” might refer to:
🟡 Querying the Dead Letter Queue
i.e., checking which messages failed and ended up in the DLQ.

Details about GC java 17 and how internall it works
------------------
max stock winning in stock price list in diffrent days
when and where we use volatile key woards
--------------
he **volatile** keyword in Java is used for multi-threaded programming to ensure visibility of shared variables across threads.
✅ Definition
volatile tells the JVM that a variable may be modified by multiple threads, and:
Reads/writes go directly to and from main memory (not thread-local CPU cache).
Ensures that updates made by one thread are visible to all others immediately.

class/object/method/blaock level of synchronization
Why kafka when and where use in java/ms
----
Feature	Why It Matters
High throughput	Can handle millions of messages per second.
Durability	Messages are stored on disk, with configurable retention.
Scalability	Horizontally scalable via partitions and brokers.
Fault tolerance	Replicated data across brokers, survives failures.
Decoupling services	Producers and consumers are loosely coupled.
Replayable logs	Consumers can reprocess messages anytime.
Event-driven	Promotes reactive, decoupled systems.

can we use kafka for request/response communication betwwen two ms
ChatGPT said:
Yes, Kafka can be used for request/response communication between two microservices, but it’s not the ideal tool for synchronous communication. Kafka is inherently asynchronous, event-driven, and loosely coupled.
========






>>>>>>>> f2b88fb49b9f1ff54ef692b87a95a098382f4542:interview-corner/src/common/prepdoc/interview/comapny-asked.txt


