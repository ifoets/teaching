ðŸ”· 1. Basic Grouping
âœ… Group List<String> by their first character.

âœ… Group a list of Employee by department.

âœ… Group integers by even/odd using groupingBy(num -> num % 2 == 0 ? "Even" : "Odd").

âœ… Group words by their lengths.

ðŸ”· 2. Grouping with Downstream Collectors
âœ… Group Employee by department and count them:
groupingBy(Employee::getDept, counting())

âœ… Group Person by city, and collect names as Set<String>.

âœ… Group Product by category and get average price.

âœ… Group Student by class, and find the top scorer in each class.

âœ… Group orders by status and get the total price per status.

ðŸ”· 3. Grouping with Nested Collections
âœ… Group Employee by location, then by department.

âœ… Group books by genre, and within each genre, group by author.

âœ… Group Transaction by year, then month, then status.

âœ… From List<Employee>, group by managerId, and for each manager get employee names sorted by age.

ðŸ”· 4. Grouping with Complex Objects
âœ… Group list of Person(name, city, age) by city and return average age.

âœ… Group a list of Employee by department and collect oldest employee per department.

âœ… Group books by title length range (short <10, medium <20, long).

âœ… Group by custom category using groupingBy(e -> classify(e)).

ðŸ”· 5. Grouping with Multiple Keys (Composite)
âœ… Group Order by (userId, month) composite key using toMap or custom class as key.

âœ… Group flights by (origin, destination) and count total flights.

âœ… Group employees by (department + location) and sum salaries.

âœ… Group data into a Map<Pair<String, Integer>, List<Obj>>.

ðŸ”· 6. Aggregations After Grouping
âœ… Group and then find max, min, or sum using reducing or collectingAndThen.

âœ… Group by region and get top 3 highest-revenue customers per region.

âœ… Group sales by region and get the product with max quantity per region.

âœ… For each product category, calculate total sales, average price, min price.

ðŸ”· 7. Grouping with Custom Collector / Immutable Map
âœ… Group and collect to unmodifiable map:
Collectors.collectingAndThen(groupingBy(...), Collections::unmodifiableMap)

âœ… Group and use a TreeMap to keep keys sorted:
Collectors.groupingBy(..., TreeMap::new, downstream)

âœ… Build your own custom collector to group into a map with reverse insertion order.

ðŸ”· 8. Partitioning (a specialized grouping case)
âœ… Partition students by passing/failing grades.

âœ… Partition numbers by prime vs non-prime.

âœ… Partition strings by palindrome or not.

âœ… Partition employees by age > 40, and then count per group.

ðŸ”· 9. Real-World Business Scenarios
âœ… Group orders by customer and calculate total order value per customer.

âœ… Group flights by airline and find the flight with max distance.

âœ… Group bug reports by severity and list distinct assignees.

âœ… Group projects by deadline month and calculate % completed.

ðŸ”· 10. Grouping into Custom Result Types
âœ… Group by category and return a Summary object with count, min, max, avg.

âœ… Group Student by batch and create a ReportCard object for each group.

âœ… Group SensorData by type and convert to DTO list with time window aggregation.

âœ… Group events by eventType and build a map of eventType -> EventSummaryDTO.