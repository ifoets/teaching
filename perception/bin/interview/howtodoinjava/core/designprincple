SOLID Principles in Java
----------------------------
Table Of Contents

1. Single Responsibility Principle
“One class should have one and only one responsibility”
This will give we the flexibility to make changes in future without worrying the impacts of changes for another entity.
For example, in log4j, we have different classes with logging methods, different classes are logging levels and so on.

2. Open Closed Principle
“Software components should be open for extension, but closed for modification”
 This means that our classes should be designed such a way that whenever fellow developers wants to change the flow of control 
 in specific conditions in application, all they need to extend our class and override some functions and that’s it.
 
 If we take a look into any good framework like struts or spring, we will see that we can not change their core logic and 
 request processing, but we modify the desired application flow just by extending some classes and plugin them in configuration files.
 
3. Liskov's Substitution Principle
“Derived types must be completely substitutable for their base types”
It means that the classes fellow developer created by extending our class should be able to fit in application without failure. 
This requires the objects of your subclasses to behave in the same way as the objects of your superclass.

pring can register one property editor for one data type and it is required to follow the constraint mandated by base class 
PropertyEditorSupport. So is any class extend PropertyEditorSupport class, then it can be substituted by everywhere base class 
is required.

4. Interface Segregation Principle
“Clients should not be forced to implement unnecessary methods which they will not use”
Take an example. Developer Alex created an interface Reportable and added two methods generateExcel() and generatedPdf(). 
Now client ‘A’ wants to use this interface but he intend to use reports only in PDF format and not in excel. Will he be able 
to use the functionality easily?

NO. He will have to implement both the methods, out of which one is extra burden put on him by designer of software. Either he 
will implement another method or leave it blank. This is not a good design.

So what is the solution? Solution is to create two interfaces by breaking the existing one. They should be like PdfReportable 
and ExcelReportable. This will give the flexibility to user to use only required functionality only.

5. Dependency Inversion Principle
“Depend on abstractions, not on concretions”
In other words. we should design our software in such a way that various modules can be separated from each other using an 
abstract layer to bind them together.

The classical use of this principle of bean configuration in Spring framework.

In spring framework, all modules are provided as separate components which can work together by simply injected dependencies in
 other module. This dependency is managed externally in XML files.
