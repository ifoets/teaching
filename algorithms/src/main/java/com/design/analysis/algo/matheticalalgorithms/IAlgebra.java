package com.design.analysis.algo.matheticalalgorithms;

import java.util.List;

/*
 * 
 * @author GuruG
 * 
 * Algebra :
1.	Find x and y satisfying ax + by = n
2.	Calculate the Discriminant Value
3.	Program for dot product and cross product of two vectors
4.	Iterated Logarithm log*(n)

5.	Program to find correlation coefficient
6.	Program for Muller Method
7.	Number of sextuplets (or six values) that satisfy an equation
8.	Complete the sequence generated by a polynomial
9.	Find the minimum value of m that satisfies ax + by = m and all values after m also satisfy
10.	Roots of Unity
11.	Number of non-negative integral solutions of a + b + c = n
12.	Roots of quadratic equation
13.	Find smallest values of x and y such that ax – by = 0
14.	Generate Pythagorean Triplets
15.	Square root of an integer
16.	Find number of solutions of a linear equation of n variables
17.	Write an iterative O(Log y) function for pow(x, y)
18.	Program to add two polynomials
19.	Multiply two polynomials
20.	Count Distinct Non-Negative Integer Pairs (x, y) that Satisfy the Inequality x*x + y*y < n
21.	Fast method to calculate inverse square root of a floating point number in IEEE 754 format
22.	Efficient program to calculate e^x

 */
public interface IAlgebra {

	/** 1. Find x and y satisfying ax + by = n **/
	public List<Integer> findXAndY(int a, int b, int n);

	/** 2. Calculate the Discriminant Value **/
	public int discriminantValue(int a, int b, int c);

	/** 3. Program for dot product and cross product of two vectors **/
	/* dot product */
	public int dotProduct(int vect_A[], int vect_B[]);

	/* cross porduct */
	public void crossProduct(int vect_A[], int vect_B[], int cross_P[]);

	/** 4. Iterated Logarithm log*(n) **/
	/** 5. Program to find correlation coefficient **/
	public float correlationCoefficient(int X[], int Y[], int n);
	/* 6. Program for Muller Method */
	/* 7. Number of sextuplets (or six values) that satisfy an equation */
	/* 8. Complete the sequence generated by a polynomial */
	/*
	 * 9. Find the minimum value of m that satisfies ax + by = m and all values
	 * after m also satisfy
	 */
	/* 10. Roots of Unity */
}
